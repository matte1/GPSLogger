{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE QuasiQuotes #-}

module Elm.Render.Fitness
  ( renderFitnessPage,
  )
where

import qualified Data.Text as T
import Data.Time.Calendar.WeekDate
import Data.Time.Clock (UTCTime (..))
import Fitness.Garmin
import Fitness.Utils
import PyF (fmt)

renderFitnessPage :: UTCTime -> [Activity] -> IO T.Text
renderFitnessPage currentTime activities' = do
  pure . render . zip weeksSinceNewYears $
    flip (getByYearAndWeek year) (mapWithDay activities') <$> weeksSinceNewYears
  where
    weeksSinceNewYears = [1..week]
    (year, week, _) = toWeekDate (getPstDay currentTime)

    render :: [(Int, [(Int, [Activity])])] -> T.Text
    render activitiesByWeekAndDay =
      [fmt|\
-- Autogenerated from src/Elm/Render/Fitness.hs
module Fitness.Autogen.Fitness exposing (view)

import Plotting.BarCharts exposing (stackedBarChart)
import Css exposing (..)
import Html.Styled exposing (..)
import Html.Styled.Attributes exposing (class, css, href, src)
import Html.Styled.Events exposing (onClick)

-- selector =
--   div
--   [ css
--     [ position absolute
--     , left (px 205)
--     , bottom (px -200)
--     ]
--   ]
--   [ select []
--     [ option [] [ text "A" ]
--     , option [] [ text "B" ]
--     , option [] [ text "C" ]
--     , option [] [ text "D" ]
--     ]
--   ]
-- , form
--   [ css [ padding (px 20)] ]
--   [ select  []
--     [ option [] [ text "A" ]
--     , option [] [ text "B" ]
--     , option [] [ text "C" ]
--     , option [] [ text "D" ]
--     ]
--   ]

view : Html msg
view =
  div
  [ class "container" ]
  [ h1
    [ css
      [ textAlign center
      , padding (px 20)
      ]
    ]
    [ {T.intercalate "\n  ," $ barChartByWeek <$> weeksSinceNewYears}
    ]
  ]

type alias {workoutTypeName} =
  {{ day : Int
  , {typeMembers}
  }}

series : List {{ label : String, accessor : {workoutTypeName} -> Float }}
series =
  [ {(T.intercalate "\n  , " (toAccessor <$> sportNames))}
  ]

{T.intercalate "\n" $ uncurry renderDataByWeek <$> activitiesByWeekAndDay}

|]
      where
        toAccessor :: T.Text -> T.Text
        toAccessor name = [fmt|{{label = "{name}", accessor = .{T.toLower name}}}|]
        typeMembers :: T.Text
        typeMembers = T.intercalate ": Float \n  , " (T.toLower <$> sportNames) <> ": Float"
        workoutTypeName :: T.Text
        workoutTypeName = "Workout"
        sports :: [Sport]
        sports = enumFrom minBound
        sportNames :: [T.Text]
        sportNames = T.pack . show <$> sports

        barChartByWeek :: Int -> T.Text
        barChartByWeek week' = [fmt|\
text "{year} {week'}"
  , fromUnstyled <|
     stackedBarChart
       (List.map .day week{week'})
       (List.map (\\{{ label, accessor }} -> ( label, List.map accessor week{week'} )) series)
|]

        renderDataByWeek :: Int -> [(Int, [Activity])] -> T.Text
        renderDataByWeek week' activitiesByDay = [fmt|
week{week'} =
  [ {T.intercalate "\n  , " (uncurry f <$> activitiesByDay)}
  ]
        |]
          where
            f :: Int -> [Activity] -> T.Text
            f day activities =
              [fmt|{workoutTypeName} {day} {T.intercalate " " $ timeDoingSport <$> sports}|]
              where
                timeDoingSport :: Sport -> T.Text
                timeDoingSport sport' =
                  let accum = (\t a -> t + if sport' == sport a then totalActivityTime a else 0)
                      time = foldl accum 0 activities / 3600
                   in [fmt|{time : .2}|]
