{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE QuasiQuotes #-}

module Elm.Render.Running
    ( renderRunningPage
    ) where

import qualified Data.Foldable as F
import Fitness.Utils
import Fitness.Garmin
import Fitness.Running
import Data.Time.Clock ( UTCTime(..), getCurrentTime )
import Data.Time.Calendar.WeekDate
import Data.Bifunctor (bimap)
import PyF ( fmt )
import qualified Data.Text as T
import Data.Time.Calendar ( Day )
import qualified Data.Map.Lazy as M

renderRunningPage :: IO T.Text
renderRunningPage = do
  currentTime <- getCurrentTime
  activities <- getActivitiesFromDir fitFileDir
  let runningMap = mapWithDay $ filterBySport [Run, TrailRun] activities
  pure $ renderRunning currentTime (M.map (map mkRunningMetrics) runningMap)
  where
    renderRunning :: UTCTime -> M.Map Day [RunningMetrics] -> T.Text
    renderRunning currentTime runningMap = [fmt|\
-- Autogenerated from src/Elm/Render/Running.hs
module Running.Page exposing (view)

import Plotting.Plotting exposing (simpleLinePlot)

import Html
import Html.Attributes exposing (class)

view : model -> Html.Html msg
view _ =
  Html.div
    [ class "container" ]
    [ simpleLinePlot "Week 20" ("Day", .day) ("Miles", .miles) thisWeek
    ]

type alias {elmTypeName} =
  {{ day : Float
  , miles : Float
  , totalTime : Float
  }}

thisWeek : List {elmTypeName}
thisWeek =
  [ {T.intercalate "\n  , " $ writeDay <$> thisWeek}
  ]

|]
      where
        elmTypeName :: T.Text
        elmTypeName = "RunningMetrics"

        year :: Integer
        week :: Int
        (year, week, _) = toWeekDate (getPstDay currentTime)

        thisWeek :: [(Int, RunningMetrics)]
        thisWeek = bimap id concatRunningMetrics <$> (getByYearAndWeek year week runningMap)

        writeDay :: (Int, RunningMetrics) -> T.Text
        writeDay (day, rm) = [fmt|{elmTypeName} {day} {miles:.2} {prettyTotalTime}|]
          where
            -- hrZones = T.intercalate " " $ F.toList show <$> (toHoursMins <$> timeInHrZones rm)
            prettyTotalTime = toHoursMins $ totalTime rm
            miles = meters rm / 1600
