{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE QuasiQuotes #-}

module Elm.Render.Running
    ( renderRunningPage
    ) where

import qualified Data.Foldable as F
import Fitness.Utils
import Fitness.Garmin
import Fitness.Running
import Data.Time.Clock ( UTCTime(..), getCurrentTime )
import Data.Time.Calendar.WeekDate
import Data.Bifunctor (bimap)
import PyF ( fmt )
import qualified Data.Text as T
import Data.Time.Calendar ( Day )
import qualified Data.Map.Lazy as M

renderRunningPage :: UTCTime -> [Activity] -> IO T.Text
renderRunningPage currentTime activities = do
  let runningMap = mapWithDay $ filterBySport [Run, TrailRun] activities
  pure $ renderRunning currentTime (M.map (map mkRunningMetrics) runningMap)
  where
    renderRunning :: UTCTime -> M.Map Day [RunningMetrics] -> T.Text
    renderRunning currentTime runningMap = [fmt|\
-- Autogenerated from src/Elm/Render/Running.hs
module Fitness.Autogen.Running exposing (view)

import Plotting.LinePlots exposing (simpleLinePlot)

import Html exposing (..)
import Html.Attributes exposing (class)

view : model -> Html.Html msg
view _ =
  Html.div
    [ class "container" ]
    [ h1 [] [ text "Week 20" ]
    , ol []
      [ li [] [ text "Total Miles: {toMiles . sum $ meters . snd <$> thisWeek}" ]
      , li [] [ text "Total Time: {toHoursMins . sum $ totalTime . snd <$> thisWeek}" ]
      ]
    , simpleLinePlot "Week 20" ("Day", .day) ("Miles", .miles) thisWeek
    ]

type alias {typeName} =
  {{ day : Float
  , miles : Float
  , totalTime : Float
  }}

thisWeek : List {typeName}
thisWeek =
  [ {T.intercalate "\n  , " $ writeDay <$> thisWeek}
  ]

|]
      where
        toMiles :: Double -> Double
        toMiles meters = meters / 1600

        typeName :: T.Text
        typeName = "RunningMetrics"

        year :: Integer
        week :: Int
        (year, week, _) = toWeekDate (getPstDay currentTime)

        thisWeek :: [(Int, RunningMetrics)]
        thisWeek = bimap id concatRunningMetrics <$> (getByYearAndWeek year week runningMap)

        writeDay :: (Int, RunningMetrics) -> T.Text
        writeDay (day, rm) = [fmt|{typeName} {day} {miles:.2} {totalTime rm / 3600}|]
          where
            miles = toMiles $ meters rm
