{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE QuasiQuotes #-}

module Elm.Render.Running
    ( renderRunningPage
    ) where

import qualified Data.Foldable as F
import Fitness.Utils
import Fitness.Garmin
import Fitness.Running
import Data.Time.Clock ( UTCTime(..), getCurrentTime )
import Data.Time.Calendar.WeekDate
import Data.Bifunctor (bimap)
import PyF ( fmt )
import qualified Data.Text as T
import Data.Time.Calendar ( Day )
import qualified Data.Map.Lazy as M

renderRunningPage :: UTCTime -> [Activity] -> IO T.Text
renderRunningPage currentTime activities = pure [fmt|\
-- Autogenerated from src/Elm/Render/Running.hs
module Fitness.Autogen.Running exposing (view)

import Plotting.LinePlots exposing (simpleLinePlot)

import Html exposing (..)
import Html.Attributes exposing (class)

type alias {typeName} =
  {{ day : Float
  , miles : Float
  , totalTime : Float
  }}

view : Html.Html msg
view =
  Html.div
  [ class "container" ]
  [ {T.intercalate "\n  , " $ writeDiv <$> reverse [1..currentWeek]}
  ]

|]
  where
    typeName :: T.Text
    typeName = "RunningMetrics"
    (currentYear, currentWeek, _) = toWeekDate (getPstDay currentTime)
    runningMap = M.map (map mkRunningMetrics) . mapWithDay $ filterBySport [Run, TrailRun] activities

    -- TODO
    -- , simpleLinePlot "{currentYear} {week}" ("Day", .day) ("Miles", .miles)
    --     [ {T.intercalate "\n  , " $ write <$> rms}
    --     ]
    -- , li [] [ text "Zones: {show $ toHoursMins <$> timeInHrZones rm}" ]
    writeDiv :: Int -> T.Text
    writeDiv week = [fmt|
      Html.div
      [ class "container" ]
      [ h1 [] [ text "{currentYear} {week}"  ]
      , ol []
        [ li [] [ text "Total Miles: {meters rm / 1600 :.2}" ]
        , li [] [ text "Total Elevation: {elevationGain rm :.2}" ]
        , li [] [ text "Meters/HeartBeat: {100 * metersPerHeartBeat rm :.2}" ]
        , li [] [ text "Total Time: {toHoursMins $ totalTime rm}" ]
        ]
      ]
|]
      where
        rms :: [(Int, RunningMetrics)]
        rms = bimap id concatRunningMetrics <$> (getByYearAndWeek currentYear week runningMap)
        rm :: RunningMetrics
        rm = concatRunningMetrics $ snd <$> rms
        write :: (Int, RunningMetrics) -> T.Text
        write (day, rm) = [fmt|{typeName} {day} {miles:.2} {totalTime rm / 3600}|]
          where
            miles = meters rm / 1600
